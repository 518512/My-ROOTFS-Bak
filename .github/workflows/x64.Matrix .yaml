name: OpenWrt Matrix Build

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Enable SSH debugging'
        required: false
        default: 'false'
  schedule:
    - cron: '0 18 * * 5'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  GITHUB_RELEASE: https://g3s0.short.gy/OpenWRT
  KERNEL_PATCHVER: 无内核，纯LXC ROOTFS
  PRODUCT_NAME: X86_X64_Matrix

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: openwrt24
            branch: openwrt-24.10
            config: OpenWRT/x86_x64/v24.x64.mini.config
            file_name: OP2410_X64_ROOTFS_mini
            version: 24.10
          - name: openwrt23
            branch: openwrt-23.05
            config: OpenWRT/x86_x64/v23.x64.mini.config
            file_name: OP2305_X64_ROOTFS_mini
            version: 23.05
          - name: openwrt22
            branch: openwrt-22.03
            config: OpenWRT/x86_x64/v22.x64.mini.config
            file_name: OP2203_X64_ROOTFS_mini
            version: 22.03

    env:
      FILE_NAME: ${{ matrix.target.file_name }}
      CONFIG_FILE: ${{ matrix.target.config }}
      DISTRIB_REVISION: OpenWRT ${{ matrix.target.version }}

    outputs:
      version_info: ${{ steps.version.outputs.summary }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          export TZ=$TZ

      - name: Enable SSH debugging
        if: ${{ github.event.inputs.ssh == 'true' }}
        uses: mxschmitt/action-tmate@v3

      - name: Clone source code
        id: version
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b ${{ matrix.target.branch }} openwrt
          cd openwrt
          info=$(git show -s --date=short --format="Author: %an\ndate: %cd\ncommit: %s\ncommit hash: %H")
          echo "OpenWRT v${{ matrix.target.version }} 更新记录" > summary.txt
          echo "$info" >> summary.txt
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Update feeds
        run: cd /workdir/openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd /workdir/openwrt && ./scripts/feeds install -a

      - name: Load custom config
        run: |
          if [ -d files ]; then mv files /workdir/openwrt/files; fi
          if [ -f banner ]; then mv banner /workdir/openwrt/package/base-files/files/etc/banner; fi
          if [ -f $CONFIG_FILE ]; then mv $CONFIG_FILE /workdir/openwrt/.config; else echo "Config file $CONFIG_FILE not found"; exit 1; fi
          if [ -f OpenWRT/custom.sh ]; then
            chmod +x OpenWRT/custom.sh
            cd /workdir/openwrt
            $GITHUB_WORKSPACE/OpenWRT/custom.sh
          else
            echo "custom.sh not found, skipping"
          fi

      - name: Download packages
        run: |
          cd /workdir/openwrt
          make defconfig
          make download -j$(nproc)
          find dl -name '*.tmp' -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          cd /workdir/openwrt
          make -j$(nproc) || make -j1 || { echo "Compilation failed"; exit 1; }
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize firmware
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd /workdir/openwrt/bin/targets/*/*
          rm -rf packages *.buildinfo profiles.json sha256sums *.vmdk *.img.gz *.bin *.manifest
          mv *.tar.gz $GITHUB_WORKSPACE/${{ matrix.target.branch }}-${{ env.BUILD_TIMESTAMP }}.tar.gz
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: Firmware-${{ matrix.target.branch }}-${{ env.BUILD_TIMESTAMP }}
          path: ${{ env.FIRMWARE }}/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: env.UPLOAD_RELEASE == 'true'
    steps:
      - name: Create combined release
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.BUILD_DATE }} for all versions
          allowUpdates: true
          tag: ${{ env.PRODUCT_NAME }}
          commit: ${{ github.sha }}
          token: ${{ secrets.TOKEN3 }}
          body: |
            **OpenWRT official Mini Firmware for x86/64**
            ${{ needs.build.outputs.version_info }}
            **Firmware Files:**
            - [OpenWrt 24.10](https://github.com/${{ github.repository }}/releases/download/${{ env.PRODUCT_NAME }}/Firmware-openwrt-24.10-${{ env.BUILD_TIMESTAMP }}.tar.gz)
            - [OpenWrt 23.05](https://github.com/${{ github.repository }}/releases/download/${{ env.PRODUCT_NAME }}/Firmware-openwrt-23.05-${{ env.BUILD_TIMESTAMP }}.tar.gz)
            - [OpenWrt 22.03](https://github.com/${{ github.repository }}/releases/download/${{ env.PRODUCT_NAME }}/Firmware-openwrt-22.03-${{ env.BUILD_TIMESTAMP }}.tar.gz)

  cleanup-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old assets from release
        uses: dev-drprasad/delete-older-releases@master
        with:
          repo: ${{ github.repository }}
          keep_latest: 5
          delete_tag_pattern: ''
          delete_tags: false
          asset_age: 35d
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'your-channel-id'
          text: |
            OpenWrt Build ${{ needs.build.result }} for ${{ env.PRODUCT_NAME }}
            Repository: ${{ github.repository }}
            Date: ${{ env.BUILD_DATE }}
            Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}