name: OpenWrt x64 Matrix 2-Release
permissions: write-all

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Enable SSH debugging'
        required: false
        default: 'false'
  schedule:
    - cron: '0 18 * * 5'  # 每周五 18:00 触发

env:
  REPO_URL: https://github.com/openwrt/openwrt
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true
  PRODUCT_NAME_Bak: X86_X64_Matrix_Bak
  PRODUCT_NAME: X86_X64_Matrix

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: openwrt24
            branch: openwrt-24.10
            config: OpenWRT/x86_x64/v23.x64.mini.config
            version: 24.10
          - name: openwrt23
            branch: openwrt-23.05
            config: OpenWRT/x86_x64/v23.x64.mini.config
            version: 23.05
          - name: openwrt22
            branch: openwrt-22.03
            config: OpenWRT/x86_x64/v23.x64.mini.config
            version: 22.03
    env:
      CONFIG_FILE: ${{ matrix.target.config }}
      DISTRIB_REVISION: OpenWRT ${{ matrix.target.version }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir

      - name: Clone OpenWrt repo
        working-directory: /mnt/workdir
        run: |
          git clone $REPO_URL -b ${{ matrix.target.branch }} openwrt
          mkdir -p $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}
          cd openwrt
          git show -s --date=short --format="OpenWRT v${{ matrix.target.version }} 更新记录%nAuthor: %an%nDate: %cd%nCommit: %s%nCommit hash: %H%n" > $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}/${{ matrix.target.branch }}.version.txt
          echo "DATE=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y%m%d')" >> $GITHUB_ENV

      - name: Update feeds
        run: cd /mnt/workdir/openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd /mnt/workdir/openwrt && ./scripts/feeds install -a

      - name: Load custom config & scripts
        run: |
          [ -e files ] && mv files /mnt/workdir/openwrt/files
          [ -e banner ] && mv banner /mnt/workdir/openwrt/package/base-files/files/etc/banner
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE /mnt/workdir/openwrt/.config
          chmod +x OpenWRT/custom.sh
          cd /mnt/workdir/openwrt
          $GITHUB_WORKSPACE/OpenWRT/custom.sh

      - name: SSH debug connection (optional)
        if: github.event.inputs.ssh == 'true'
        uses: P3TERX/ssh2actions@v1.0.0
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download packages
        run: |
          cd /mnt/workdir/openwrt
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      - name: Before Compile - list files
        run: ls -lh /mnt/workdir/openwrt/bin/targets/*/* || true

      - name: Compile firmware
        id: compile
        run: |
          cd /mnt/workdir/openwrt
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: After Compile - list files
        run: ls -lh /mnt/workdir/openwrt/bin/targets/*/* || true

      - name: Upload raw firmware (unrenamed) as artifact
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: RawFirmware-${{ matrix.target.branch }}
          path: /mnt/workdir/openwrt/bin/targets/*/*/*.tar.gz

      - name: Rename firmware and copy to workspace
        if: steps.compile.outputs.status == 'success'
        run: |
          mkdir -p $GITHUB_WORKSPACE/renamed
          cd /mnt/workdir/openwrt/bin/targets/*/*
          echo "Before rename files:"
          ls -lh openwrt-*-rootfs.tar.gz || true
          ORIGINAL=$(ls openwrt-*-rootfs.tar.gz | head -n 1)
          NEWNAME="openwrt-${{ matrix.target.version }}-${DATE1}-x86-64-rootfs.tar.gz"
          cp "$ORIGINAL" "$GITHUB_WORKSPACE/renamed/$NEWNAME"
          echo "After rename files in renamed folder:"
          ls -lh $GITHUB_WORKSPACE/renamed || true
          echo "FIRMWARE_RENAMED=$GITHUB_WORKSPACE/renamed/$NEWNAME" >> $GITHUB_ENV

      - name: Upload renamed firmware as artifact
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: RenamedFirmware-${{ matrix.target.branch }}
          path: ${{ env.FIRMWARE_RENAMED }}

      - name: Upload version info as artifact
        uses: actions/upload-artifact@v4
        with:
          name: VersionInfo-${{ matrix.target.branch }}
          path: ${{ github.workspace }}/version-info/${{ matrix.target.branch }}/*.version.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download version info artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: VersionInfo-*
          path: ./versions

      - name: Download raw firmware artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: RawFirmware-*
          path: ./main

      - name: Download renamed firmware artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: RenamedFirmware-*
          path: ./renamed

      - name: Gather version info
        run: |
          find ./versions -name "*.version.txt" | sort | xargs cat > version_body.txt
          echo "ALL_VERSION_INFO<<EOF" >> $GITHUB_ENV
          cat version_body.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create main release (unrenamed files)
        if: ${{ env.UPLOAD_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME }}
          name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
          body: |
            **OpenWRT 官方精简固件**

            ${{ env.ALL_VERSION_INFO }}
          files: ./main/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Create backup release (renamed files)
        if: ${{ env.UPLOAD_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME_Bak }}
          name: ${{ env.PRODUCT_NAME_Bak }}
          body: |
            **OpenWRT 重命名备份固件**

            ${{ env.ALL_VERSION_INFO }}
          files: ./renamed/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Telegram notification
        if: ${{ env.UPLOAD_RELEASE == 'true' }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="✔️ ${{ env.PRODUCT_NAME }} 固件已成功编译！%0A⏰ 时间: ${{ env.DATE }}%0A📥 下载地址: https://github.com/${{ github.repository }}/releases/tag/${{ env.PRODUCT_NAME }}" >/dev/null

