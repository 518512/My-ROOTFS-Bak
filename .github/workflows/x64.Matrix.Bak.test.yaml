name: OpenWrt x64 Matrix 2-Release
permissions: write-all

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Enable SSH debugging'
        required: false
        default: 'false'
  schedule:
    - cron: '0 18 * * 5'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  GITHUB_RELEASE: https://g3s0.short.gy/OpenWRT
  PRODUCT_NAME_Bak: X86_X64_Matrix_Bak
  PRODUCT_NAME: X86_X64_Matrix

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: openwrt24
            branch: openwrt-24.10
            config: OpenWRT/x86_x64/v23.x64.mini.config
            file_name: OP2410_X64_ROOTFS_mini
            version: 24.10
          - name: openwrt23
            branch: openwrt-23.05
            config: OpenWRT/x86_x64/v23.x64.mini.config
            file_name: OP2305_X64_ROOTFS_mini
            version: 23.05
          - name: openwrt22
            branch: openwrt-22.03
            config: OpenWRT/x86_x64/v23.x64.mini.config
            file_name: OP2203_X64_ROOTFS_mini
            version: 22.03
    env:
      FILE_NAME: ${{ matrix.target.file_name }}
      CONFIG_FILE: ${{ matrix.target.config }}
      DISTRIB_REVISION: OpenWRT ${{ matrix.target.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup build environment
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir

      - name: Clone source code
        working-directory: /mnt/workdir
        run: |
          git clone $REPO_URL -b ${{ matrix.target.branch }} openwrt
          mkdir -p $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}
          cd openwrt
          git show -s --date=short --format="OpenWRT v${{ matrix.target.version }} 更新记录%nAuthor: %an%nDate: %cd%nCommit: %s%nCommit hash: %H%n" > $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}/${{ matrix.target.branch }}.version.txt
          echo "DATE=$(date '+%Y-%m-%d %H')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Update feeds
        run: cd /mnt/workdir/openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd /mnt/workdir/openwrt && ./scripts/feeds install -a

      - name: Load custom config
        run: |
          [ -e files ] && mv files /mnt/workdir/openwrt/files
          [ -e banner ] && mv banner /mnt/workdir/openwrt/package/base-files/files/etc/banner
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE /mnt/workdir/openwrt/.config
          chmod +x OpenWRT/custom.sh
          cd /mnt/workdir/openwrt
          $GITHUB_WORKSPACE/OpenWRT/custom.sh
          
      - name: Download packages
      run: |
          cd /mnt/workdir/openwrt
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      - name: Telegram notify - 编译开始
        run: |
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=🚧 开始编译 OpenWRT ${{ matrix.target.branch }}，目标: ${{ env.FILE_NAME }}%0A⏰ 时间: ${{ env.DATE1 }}"

      - name: Compile firmware
        id: compile
        run: |
          cd /mnt/workdir/openwrt
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE2=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Rename firmware for Bak release
        if: steps.compile.outputs.status == 'success'
        run: |
          cd /mnt/workdir/openwrt/bin/targets/*/*
          for f in *.tar.gz; do
            cp "$f" "$GITHUB_WORKSPACE/${{ matrix.target.branch }}-${{ env.FILE_DATE2 }}-$f"
          done

      - name: Upload renamed firmware to Bak release
        if: steps.compile.outputs.status == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME_Bak }}
          name: R${{ env.DATE1 }} for ${{ env.PRODUCT_NAME_Bak }}
          body: |
            🔁 OpenWRT 构建备份（含重命名文件）

            ${{ env.ALL_VERSION_INFO }}
          files: ${{ github.workspace }}/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Upload raw firmware to release
        if: steps.compile.outputs.status == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME }}
          name: R${{ env.DATE1 }} for ${{ env.PRODUCT_NAME }}
          body: |
            ✅ OpenWRT 官方精简固件

            ${{ env.ALL_VERSION_INFO }}
          files: /mnt/workdir/openwrt/bin/targets/*/*/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Telegram notify - 编译完成
        if: steps.compile.outputs.status == 'success'
        run: |
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=✅ 编译完成: OpenWRT ${{ matrix.target.branch }}\n📦 文件名: ${{ env.FILE_NAME }}%0A📅 时间: ${{ env.DATE1 }}%0A📥 下载地址: ${{ env.GITHUB_RELEASE }}"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download version info artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: VersionInfo-*
          path: ./versions

      - name: Gather version info
        run: |
          find ./versions -name "*.version.txt" | sort | xargs cat > version_body.txt
          echo "ALL_VERSION_INFO<<EOF" >> $GITHUB_ENV
          cat version_body.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Telegram notify - 所有版本编译完成
        run: |
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=🎉 所有 OpenWRT 固件编译完成！%0A📅 时间: ${{ env.DATE1 }}%0A📥 下载地址: ${{ env.GITHUB_RELEASE }}"
