name: OpenWrt x64 Matrix 2-Release
permissions: write-all

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Enable SSH debugging'
        required: false
        default: 'false'
  schedule:
    - cron: '0 18 * * 5'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true
  GITHUB_RELEASE: https://g3s0.short.gy/OpenWRT
  KERNEL_PATCHVER: 无内核，纯LXC ROOTFS
  PRODUCT_NAME: X86_X64_Matrix
  PRODUCT_NAME_Bak: X86_X64_Matrix_Bak

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: openwrt24
            branch: openwrt-24.10
            config: OpenWRT/x86_x64/v23.x64.mini.config
            version: 24.10
          - name: openwrt23
            branch: openwrt-23.05
            config: OpenWRT/x86_x64/v23.x64.mini.config
            version: 23.05
          - name: openwrt22
            branch: openwrt-22.03
            config: OpenWRT/x86_x64/v23.x64.mini.config
            version: 22.03
    env:
      CONFIG_FILE: ${{ matrix.target.config }}
      DISTRIB_REVISION: OpenWRT ${{ matrix.target.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /mnt/workdir && sudo chown $USER:$GROUPS /mnt/workdir

      - name: Clone source
        working-directory: /mnt/workdir
        run: |
          git clone $REPO_URL -b ${{ matrix.target.branch }} openwrt
          mkdir -p $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}
          cd openwrt
          git show -s --date=short --format="OpenWRT v${{ matrix.target.version }} 更新记录%nAuthor: %an%nDate: %cd%nCommit: %s%nCommit hash: %H%n" > $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}/${{ matrix.target.branch }}.version.txt
          echo "DATE=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Update & install feeds
        run: |
          cd /mnt/workdir/openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load config & run custom
        run: |
          [ -e files ] && mv files /mnt/workdir/openwrt/files
          [ -e banner ] && mv banner /mnt/workdir/openwrt/package/base-files/files/etc/banner
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE /mnt/workdir/openwrt/.config
          chmod +x OpenWRT/custom.sh
          cd /mnt/workdir/openwrt
          $GITHUB_WORKSPACE/OpenWRT/custom.sh

      - name: SSH debug (optional)
        if: github.event.inputs.ssh == 'true'
        uses: P3TERX/ssh2actions@v1.0.0
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download packages
        run: |
          cd /mnt/workdir/openwrt
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile
        id: compile
        run: |
          cd /mnt/workdir/openwrt
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Collect tar.gz
        id: collect
        if: steps.compile.outputs.status == 'success'
        run: |
          mkdir -p $GITHUB_WORKSPACE/out/${{ matrix.target.branch }}
          cp /mnt/workdir/openwrt/bin/targets/*/*/*.tar.gz $GITHUB_WORKSPACE/out/${{ matrix.target.branch }}/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload to main release (original name + prefix)
        if: steps.collect.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME }}
          name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
          files: |
            out/${{ matrix.target.branch }}/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Upload to backup release (renamed with datetime)
        if: steps.collect.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        run: |
          mkdir -p renamed
          for f in out/${{ matrix.target.branch }}/*.tar.gz; do
            cp "$f" "renamed/${{ matrix.target.branch }}-${{ env.DATETIME }}-$(basename "$f")"
          done

      - name: Upload renamed to Bak release
        if: steps.collect.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME_Bak }}
          name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME_Bak }}
          files: |
            renamed/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Upload version info (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: VersionInfo-${{ matrix.target.branch }}
          path: version-info/${{ matrix.target.branch }}/*.version.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download version info
        uses: actions/download-artifact@v4
        with:
          pattern: VersionInfo-*
          path: ./versions

      - name: Merge version info
        run: |
          find ./versions -name "*.version.txt" | sort | xargs cat > version_body.txt
          echo "ALL_VERSION_INFO<<EOF" >> $GITHUB_ENV
          cat version_body.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Finalize release (main)
        if: env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@main
        with:
          name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
          allowUpdates: true
          tag: ${{ env.PRODUCT_NAME }}
          commit: ${{ github.sha }}
          token: ${{ secrets.TOKEN3 }}
          body: |
            ✅ OpenWRT 官方精简固件

            ${{ env.ALL_VERSION_INFO }}

      - name: Finalize release (backup)
        if: env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@main
        with:
          name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME_Bak }}
          allowUpdates: true
          tag: ${{ env.PRODUCT_NAME_Bak }}
          commit: ${{ github.sha }}
          token: ${{ secrets.TOKEN3 }}
          body: |
            🔁 OpenWRT 构建备份（含重命名文件）

            ${{ env.ALL_VERSION_INFO }}

      - name: Telegram notify
        run: |
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=✔️ 编译完成: ${{ env.PRODUCT_NAME }}%0A📅 日期: ${{ env.DATE }}%0A📦 下载: ${{ env.GITHUB_RELEASE }}" >/dev/null 2>&1
